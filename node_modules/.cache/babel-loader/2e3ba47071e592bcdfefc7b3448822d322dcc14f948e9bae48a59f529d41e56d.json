{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nimport { useSyncExternalStore } from 'react';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD9esyBFbDrbNz7s4ukZAG8ZNqZ9gl-n10\",\n  authDomain: \"crwn-clothing-cc.firebaseapp.com\",\n  projectId: \"crwn-clothing-cc\",\n  storageBucket: \"crwn-clothing-cc.appspot.com\",\n  messagingSenderId: \"1083302338429\",\n  appId: \"1:1083302338429:web:06038d998ef0e0a7d47614\"\n};\nconst firebaseApp = initializeApp(firebaseConfig);\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userStapshot = await getDoc(userDocRef);\n  if (!userStapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log(\"Error creating the user\", error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = (email, password) => {\n  createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","useSyncExternalStore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","provider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userStapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password"],"sources":["E:/Wazniak/crwn-clothing-v2/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { \r\n    getAuth, \r\n    signInWithRedirect, \r\n    signInWithPopup, \r\n    GoogleAuthProvider,\r\n    createUserWithEmailAndPassword,\r\n} from 'firebase/auth';\r\nimport {\r\n    getFirestore,\r\n    doc,\r\n    getDoc,\r\n    setDoc,\r\n} from 'firebase/firestore'\r\nimport { useSyncExternalStore } from 'react';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD9esyBFbDrbNz7s4ukZAG8ZNqZ9gl-n10\",\r\n    authDomain: \"crwn-clothing-cc.firebaseapp.com\",\r\n    projectId: \"crwn-clothing-cc\",\r\n    storageBucket: \"crwn-clothing-cc.appspot.com\",\r\n    messagingSenderId: \"1083302338429\",\r\n    appId: \"1:1083302338429:web:06038d998ef0e0a7d47614\"\r\n};\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nconst provider = new GoogleAuthProvider();\r\nprovider.setCustomParameters({ \r\n    prompt: \"select_account\"\r\n});\r\n\r\nexport const auth = getAuth();\r\nexport const signInWithGooglePopup = () => signInWithPopup(auth, provider);\r\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, provider);\r\n\r\nexport const db = getFirestore();\r\n\r\nexport const createUserDocumentFromAuth = async (userAuth) => {\r\n    const userDocRef = doc(db, 'users', userAuth.uid);\r\n\r\n    const userStapshot = await getDoc(userDocRef);\r\n\r\n    if(!userStapshot.exists()){\r\n        const {displayName, email} = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try{\r\n            await setDoc(userDocRef, {\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n            });\r\n        }catch(error){\r\n            console.log(\"Error creating the user\", error.message);\r\n        }\r\n    }\r\n\r\n    return userDocRef;\r\n}\r\n\r\nexport const createAuthUserWithEmailAndPassword = (email, password) => {\r\n\r\n    createUserWithEmailAndPassword(auth, email, password);\r\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACIC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,QAC3B,eAAe;AACtB,SACIC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,MAAM,QACH,oBAAoB;AAC3B,SAASC,oBAAoB,QAAQ,OAAO;AAE5C,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,kCAAkC;EAC9CC,SAAS,EAAE,kBAAkB;EAC7BC,aAAa,EAAE,8BAA8B;EAC7CC,iBAAiB,EAAE,eAAe;EAClCC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,WAAW,GAAGlB,aAAa,CAACW,cAAc,CAAC;AAEjD,MAAMQ,QAAQ,GAAG,IAAIf,kBAAkB,CAAC,CAAC;AACzCe,QAAQ,CAACC,mBAAmB,CAAC;EACzBC,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGrB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMsB,qBAAqB,GAAGA,CAAA,KAAMpB,eAAe,CAACmB,IAAI,EAAEH,QAAQ,CAAC;AAC1E,OAAO,MAAMK,wBAAwB,GAAGA,CAAA,KAAMtB,kBAAkB,CAACoB,IAAI,EAAEH,QAAQ,CAAC;AAEhF,OAAO,MAAMM,EAAE,GAAGnB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMoB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC1D,MAAMC,UAAU,GAAGrB,GAAG,CAACkB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EAEjD,MAAMC,YAAY,GAAG,MAAMtB,MAAM,CAACoB,UAAU,CAAC;EAE7C,IAAG,CAACE,YAAY,CAACC,MAAM,CAAC,CAAC,EAAC;IACtB,MAAM;MAACC,WAAW;MAAEC;IAAK,CAAC,GAAGN,QAAQ;IACrC,MAAMO,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE5B,IAAG;MACC,MAAM1B,MAAM,CAACmB,UAAU,EAAE;QACrBI,WAAW;QACXC,KAAK;QACLC;MACJ,CAAC,CAAC;IACN,CAAC,QAAME,KAAK,EAAC;MACTC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,KAAK,CAACG,OAAO,CAAC;IACzD;EACJ;EAEA,OAAOX,UAAU;AACrB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAGA,CAACP,KAAK,EAAEQ,QAAQ,KAAK;EAEnEpC,8BAA8B,CAACiB,IAAI,EAAEW,KAAK,EAAEQ,QAAQ,CAAC;AACzD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}